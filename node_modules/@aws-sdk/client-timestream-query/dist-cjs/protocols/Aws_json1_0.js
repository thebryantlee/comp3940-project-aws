"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.de_UpdateScheduledQueryCommand = exports.de_UntagResourceCommand = exports.de_TagResourceCommand = exports.de_QueryCommand = exports.de_PrepareQueryCommand = exports.de_ListTagsForResourceCommand = exports.de_ListScheduledQueriesCommand = exports.de_ExecuteScheduledQueryCommand = exports.de_DescribeScheduledQueryCommand = exports.de_DescribeEndpointsCommand = exports.de_DeleteScheduledQueryCommand = exports.de_CreateScheduledQueryCommand = exports.de_CancelQueryCommand = exports.se_UpdateScheduledQueryCommand = exports.se_UntagResourceCommand = exports.se_TagResourceCommand = exports.se_QueryCommand = exports.se_PrepareQueryCommand = exports.se_ListTagsForResourceCommand = exports.se_ListScheduledQueriesCommand = exports.se_ExecuteScheduledQueryCommand = exports.se_DescribeScheduledQueryCommand = exports.se_DescribeEndpointsCommand = exports.se_DeleteScheduledQueryCommand = exports.se_CreateScheduledQueryCommand = exports.se_CancelQueryCommand = void 0;
const protocol_http_1 = require("@smithy/protocol-http");
const smithy_client_1 = require("@smithy/smithy-client");
const uuid_1 = require("uuid");
const models_0_1 = require("../models/models_0");
const TimestreamQueryServiceException_1 = require("../models/TimestreamQueryServiceException");
const se_CancelQueryCommand = async (input, context) => {
    const headers = sharedHeaders("CancelQuery");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CancelQueryCommand = se_CancelQueryCommand;
const se_CreateScheduledQueryCommand = async (input, context) => {
    const headers = sharedHeaders("CreateScheduledQuery");
    let body;
    body = JSON.stringify(se_CreateScheduledQueryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateScheduledQueryCommand = se_CreateScheduledQueryCommand;
const se_DeleteScheduledQueryCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteScheduledQuery");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteScheduledQueryCommand = se_DeleteScheduledQueryCommand;
const se_DescribeEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEndpoints");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeEndpointsCommand = se_DescribeEndpointsCommand;
const se_DescribeScheduledQueryCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeScheduledQuery");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeScheduledQueryCommand = se_DescribeScheduledQueryCommand;
const se_ExecuteScheduledQueryCommand = async (input, context) => {
    const headers = sharedHeaders("ExecuteScheduledQuery");
    let body;
    body = JSON.stringify(se_ExecuteScheduledQueryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ExecuteScheduledQueryCommand = se_ExecuteScheduledQueryCommand;
const se_ListScheduledQueriesCommand = async (input, context) => {
    const headers = sharedHeaders("ListScheduledQueries");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListScheduledQueriesCommand = se_ListScheduledQueriesCommand;
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
const se_PrepareQueryCommand = async (input, context) => {
    const headers = sharedHeaders("PrepareQuery");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PrepareQueryCommand = se_PrepareQueryCommand;
const se_QueryCommand = async (input, context) => {
    const headers = sharedHeaders("Query");
    let body;
    body = JSON.stringify(se_QueryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_QueryCommand = se_QueryCommand;
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TagResourceCommand = se_TagResourceCommand;
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UntagResourceCommand = se_UntagResourceCommand;
const se_UpdateScheduledQueryCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateScheduledQuery");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateScheduledQueryCommand = se_UpdateScheduledQueryCommand;
const de_CancelQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CancelQueryCommand = de_CancelQueryCommand;
const de_CancelQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.timestreamquery#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.timestreamquery#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.timestreamquery#InvalidEndpointException":
            throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.timestreamquery#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.timestreamquery#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateScheduledQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateScheduledQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateScheduledQueryCommand = de_CreateScheduledQueryCommand;
const de_CreateScheduledQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.timestreamquery#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.timestreamquery#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.timestreamquery#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.timestreamquery#InvalidEndpointException":
            throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.timestreamquery#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.timestreamquery#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.timestreamquery#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteScheduledQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteScheduledQueryCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteScheduledQueryCommand = de_DeleteScheduledQueryCommand;
const de_DeleteScheduledQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.timestreamquery#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.timestreamquery#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.timestreamquery#InvalidEndpointException":
            throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.timestreamquery#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.timestreamquery#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.timestreamquery#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeEndpointsCommand = de_DescribeEndpointsCommand;
const de_DescribeEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.timestreamquery#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.timestreamquery#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.timestreamquery#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeScheduledQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeScheduledQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeScheduledQueryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeScheduledQueryCommand = de_DescribeScheduledQueryCommand;
const de_DescribeScheduledQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.timestreamquery#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.timestreamquery#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.timestreamquery#InvalidEndpointException":
            throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.timestreamquery#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.timestreamquery#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.timestreamquery#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ExecuteScheduledQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ExecuteScheduledQueryCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_ExecuteScheduledQueryCommand = de_ExecuteScheduledQueryCommand;
const de_ExecuteScheduledQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.timestreamquery#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.timestreamquery#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.timestreamquery#InvalidEndpointException":
            throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.timestreamquery#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.timestreamquery#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.timestreamquery#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListScheduledQueriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListScheduledQueriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListScheduledQueriesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListScheduledQueriesCommand = de_ListScheduledQueriesCommand;
const de_ListScheduledQueriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.timestreamquery#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.timestreamquery#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.timestreamquery#InvalidEndpointException":
            throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.timestreamquery#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.timestreamquery#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
const de_ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidEndpointException":
        case "com.amazonaws.timestreamquery#InvalidEndpointException":
            throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.timestreamquery#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.timestreamquery#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.timestreamquery#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PrepareQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PrepareQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PrepareQueryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PrepareQueryCommand = de_PrepareQueryCommand;
const de_PrepareQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.timestreamquery#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.timestreamquery#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.timestreamquery#InvalidEndpointException":
            throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.timestreamquery#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.timestreamquery#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_QueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_QueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_QueryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_QueryCommand = de_QueryCommand;
const de_QueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.timestreamquery#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.timestreamquery#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.timestreamquery#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.timestreamquery#InvalidEndpointException":
            throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "QueryExecutionException":
        case "com.amazonaws.timestreamquery#QueryExecutionException":
            throw await de_QueryExecutionExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.timestreamquery#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.timestreamquery#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_TagResourceCommand = de_TagResourceCommand;
const de_TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidEndpointException":
        case "com.amazonaws.timestreamquery#InvalidEndpointException":
            throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.timestreamquery#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.timestreamquery#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.timestreamquery#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.timestreamquery#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UntagResourceCommand = de_UntagResourceCommand;
const de_UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidEndpointException":
        case "com.amazonaws.timestreamquery#InvalidEndpointException":
            throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.timestreamquery#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.timestreamquery#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.timestreamquery#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateScheduledQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateScheduledQueryCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_UpdateScheduledQueryCommand = de_UpdateScheduledQueryCommand;
const de_UpdateScheduledQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.timestreamquery#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.timestreamquery#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.timestreamquery#InvalidEndpointException":
            throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.timestreamquery#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.timestreamquery#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.timestreamquery#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidEndpointExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidEndpointException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_QueryExecutionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.QueryExecutionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const se_CreateScheduledQueryRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        ClientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        ErrorReportConfiguration: smithy_client_1._json,
        KmsKeyId: [],
        Name: [],
        NotificationConfiguration: smithy_client_1._json,
        QueryString: [],
        ScheduleConfiguration: smithy_client_1._json,
        ScheduledQueryExecutionRoleArn: [],
        Tags: smithy_client_1._json,
        TargetConfiguration: smithy_client_1._json,
    });
};
const se_ExecuteScheduledQueryRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        ClientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        InvocationTime: (_) => Math.round(_.getTime() / 1000),
        ScheduledQueryArn: [],
    });
};
const se_QueryRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        ClientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        MaxRows: [],
        NextToken: [],
        QueryString: [],
    });
};
const de_ColumnInfo = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Name: smithy_client_1.expectString,
        Type: (_) => de_Type(_, context),
    });
};
const de_ColumnInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ColumnInfo(entry, context);
    });
    return retVal;
};
const de_Datum = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ArrayValue: (_) => de_DatumList(_, context),
        NullValue: smithy_client_1.expectBoolean,
        RowValue: (_) => de_Row(_, context),
        ScalarValue: smithy_client_1.expectString,
        TimeSeriesValue: (_) => de_TimeSeriesDataPointList(_, context),
    });
};
const de_DatumList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Datum(entry, context);
    });
    return retVal;
};
const de_DescribeScheduledQueryResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ScheduledQuery: (_) => de_ScheduledQueryDescription(_, context),
    });
};
const de_ListScheduledQueriesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        ScheduledQueries: (_) => de_ScheduledQueryList(_, context),
    });
};
const de_ParameterMapping = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Name: smithy_client_1.expectString,
        Type: (_) => de_Type(_, context),
    });
};
const de_ParameterMappingList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ParameterMapping(entry, context);
    });
    return retVal;
};
const de_PrepareQueryResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Columns: (_) => de_SelectColumnList(_, context),
        Parameters: (_) => de_ParameterMappingList(_, context),
        QueryString: smithy_client_1.expectString,
    });
};
const de_QueryResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ColumnInfo: (_) => de_ColumnInfoList(_, context),
        NextToken: smithy_client_1.expectString,
        QueryId: smithy_client_1.expectString,
        QueryStatus: (_) => de_QueryStatus(_, context),
        Rows: (_) => de_RowList(_, context),
    });
};
const de_QueryStatus = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CumulativeBytesMetered: smithy_client_1.expectLong,
        CumulativeBytesScanned: smithy_client_1.expectLong,
        ProgressPercentage: smithy_client_1.limitedParseDouble,
    });
};
const de_Row = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Data: (_) => de_DatumList(_, context),
    });
};
const de_RowList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Row(entry, context);
    });
    return retVal;
};
const de_ScheduledQuery = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Arn: smithy_client_1.expectString,
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ErrorReportConfiguration: smithy_client_1._json,
        LastRunStatus: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        NextInvocationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        PreviousInvocationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        State: smithy_client_1.expectString,
        TargetDestination: smithy_client_1._json,
    });
};
const de_ScheduledQueryDescription = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Arn: smithy_client_1.expectString,
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ErrorReportConfiguration: smithy_client_1._json,
        KmsKeyId: smithy_client_1.expectString,
        LastRunSummary: (_) => de_ScheduledQueryRunSummary(_, context),
        Name: smithy_client_1.expectString,
        NextInvocationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        NotificationConfiguration: smithy_client_1._json,
        PreviousInvocationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        QueryString: smithy_client_1.expectString,
        RecentlyFailedRuns: (_) => de_ScheduledQueryRunSummaryList(_, context),
        ScheduleConfiguration: smithy_client_1._json,
        ScheduledQueryExecutionRoleArn: smithy_client_1.expectString,
        State: smithy_client_1.expectString,
        TargetConfiguration: smithy_client_1._json,
    });
};
const de_ScheduledQueryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScheduledQuery(entry, context);
    });
    return retVal;
};
const de_ScheduledQueryRunSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ErrorReportLocation: smithy_client_1._json,
        ExecutionStats: smithy_client_1._json,
        FailureReason: smithy_client_1.expectString,
        InvocationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        RunStatus: smithy_client_1.expectString,
        TriggerTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_ScheduledQueryRunSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScheduledQueryRunSummary(entry, context);
    });
    return retVal;
};
const de_SelectColumn = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Aliased: smithy_client_1.expectBoolean,
        DatabaseName: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString,
        Type: (_) => de_Type(_, context),
    });
};
const de_SelectColumnList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SelectColumn(entry, context);
    });
    return retVal;
};
const de_TimeSeriesDataPoint = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Time: smithy_client_1.expectString,
        Value: (_) => de_Datum(_, context),
    });
};
const de_TimeSeriesDataPointList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TimeSeriesDataPoint(entry, context);
    });
    return retVal;
};
const de_Type = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ArrayColumnInfo: (_) => de_ColumnInfo(_, context),
        RowColumnInfo: (_) => de_ColumnInfoList(_, context),
        ScalarType: smithy_client_1.expectString,
        TimeSeriesMeasureValueColumnInfo: (_) => de_ColumnInfo(_, context),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = (0, smithy_client_1.withBaseException)(TimestreamQueryServiceException_1.TimestreamQueryServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `Timestream_20181101.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
