import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { TimestreamQueryServiceException as __BaseException } from "./TimestreamQueryServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface CancelQueryRequest {
  QueryId: string | undefined;
}
export interface CancelQueryResponse {
  CancellationMessage?: string;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class InvalidEndpointException extends __BaseException {
  readonly name: "InvalidEndpointException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidEndpointException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare const ScalarType: {
  readonly BIGINT: "BIGINT";
  readonly BOOLEAN: "BOOLEAN";
  readonly DATE: "DATE";
  readonly DOUBLE: "DOUBLE";
  readonly INTEGER: "INTEGER";
  readonly INTERVAL_DAY_TO_SECOND: "INTERVAL_DAY_TO_SECOND";
  readonly INTERVAL_YEAR_TO_MONTH: "INTERVAL_YEAR_TO_MONTH";
  readonly TIME: "TIME";
  readonly TIMESTAMP: "TIMESTAMP";
  readonly UNKNOWN: "UNKNOWN";
  readonly VARCHAR: "VARCHAR";
};
export type ScalarType = (typeof ScalarType)[keyof typeof ScalarType];
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare const S3EncryptionOption: {
  readonly SSE_KMS: "SSE_KMS";
  readonly SSE_S3: "SSE_S3";
};
export type S3EncryptionOption =
  (typeof S3EncryptionOption)[keyof typeof S3EncryptionOption];
export interface S3Configuration {
  BucketName: string | undefined;
  ObjectKeyPrefix?: string;
  EncryptionOption?: S3EncryptionOption;
}
export interface ErrorReportConfiguration {
  S3Configuration: S3Configuration | undefined;
}
export interface SnsConfiguration {
  TopicArn: string | undefined;
}
export interface NotificationConfiguration {
  SnsConfiguration: SnsConfiguration | undefined;
}
export interface ScheduleConfiguration {
  ScheduleExpression: string | undefined;
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export declare const DimensionValueType: {
  readonly VARCHAR: "VARCHAR";
};
export type DimensionValueType =
  (typeof DimensionValueType)[keyof typeof DimensionValueType];
export interface DimensionMapping {
  Name: string | undefined;
  DimensionValueType: DimensionValueType | undefined;
}
export declare const MeasureValueType: {
  readonly BIGINT: "BIGINT";
  readonly BOOLEAN: "BOOLEAN";
  readonly DOUBLE: "DOUBLE";
  readonly MULTI: "MULTI";
  readonly VARCHAR: "VARCHAR";
};
export type MeasureValueType =
  (typeof MeasureValueType)[keyof typeof MeasureValueType];
export declare const ScalarMeasureValueType: {
  readonly BIGINT: "BIGINT";
  readonly BOOLEAN: "BOOLEAN";
  readonly DOUBLE: "DOUBLE";
  readonly TIMESTAMP: "TIMESTAMP";
  readonly VARCHAR: "VARCHAR";
};
export type ScalarMeasureValueType =
  (typeof ScalarMeasureValueType)[keyof typeof ScalarMeasureValueType];
export interface MultiMeasureAttributeMapping {
  SourceColumn: string | undefined;
  TargetMultiMeasureAttributeName?: string;
  MeasureValueType: ScalarMeasureValueType | undefined;
}
export interface MixedMeasureMapping {
  MeasureName?: string;
  SourceColumn?: string;
  TargetMeasureName?: string;
  MeasureValueType: MeasureValueType | undefined;
  MultiMeasureAttributeMappings?: MultiMeasureAttributeMapping[];
}
export interface MultiMeasureMappings {
  TargetMultiMeasureName?: string;
  MultiMeasureAttributeMappings: MultiMeasureAttributeMapping[] | undefined;
}
export interface TimestreamConfiguration {
  DatabaseName: string | undefined;
  TableName: string | undefined;
  TimeColumn: string | undefined;
  DimensionMappings: DimensionMapping[] | undefined;
  MultiMeasureMappings?: MultiMeasureMappings;
  MixedMeasureMappings?: MixedMeasureMapping[];
  MeasureNameColumn?: string;
}
export interface TargetConfiguration {
  TimestreamConfiguration: TimestreamConfiguration | undefined;
}
export interface CreateScheduledQueryRequest {
  Name: string | undefined;
  QueryString: string | undefined;
  ScheduleConfiguration: ScheduleConfiguration | undefined;
  NotificationConfiguration: NotificationConfiguration | undefined;
  TargetConfiguration?: TargetConfiguration;
  ClientToken?: string;
  ScheduledQueryExecutionRoleArn: string | undefined;
  Tags?: Tag[];
  KmsKeyId?: string;
  ErrorReportConfiguration: ErrorReportConfiguration | undefined;
}
export interface CreateScheduledQueryResponse {
  Arn: string | undefined;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export interface DeleteScheduledQueryRequest {
  ScheduledQueryArn: string | undefined;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  ScheduledQueryArn?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface DescribeEndpointsRequest {}
export interface Endpoint {
  Address: string | undefined;
  CachePeriodInMinutes: number | undefined;
}
export interface DescribeEndpointsResponse {
  Endpoints: Endpoint[] | undefined;
}
export interface DescribeScheduledQueryRequest {
  ScheduledQueryArn: string | undefined;
}
export interface S3ReportLocation {
  BucketName?: string;
  ObjectKey?: string;
}
export interface ErrorReportLocation {
  S3ReportLocation?: S3ReportLocation;
}
export interface ExecutionStats {
  ExecutionTimeInMillis?: number;
  DataWrites?: number;
  BytesMetered?: number;
  RecordsIngested?: number;
  QueryResultRows?: number;
}
export declare const ScheduledQueryRunStatus: {
  readonly AUTO_TRIGGER_FAILURE: "AUTO_TRIGGER_FAILURE";
  readonly AUTO_TRIGGER_SUCCESS: "AUTO_TRIGGER_SUCCESS";
  readonly MANUAL_TRIGGER_FAILURE: "MANUAL_TRIGGER_FAILURE";
  readonly MANUAL_TRIGGER_SUCCESS: "MANUAL_TRIGGER_SUCCESS";
};
export type ScheduledQueryRunStatus =
  (typeof ScheduledQueryRunStatus)[keyof typeof ScheduledQueryRunStatus];
export interface ScheduledQueryRunSummary {
  InvocationTime?: Date;
  TriggerTime?: Date;
  RunStatus?: ScheduledQueryRunStatus;
  ExecutionStats?: ExecutionStats;
  ErrorReportLocation?: ErrorReportLocation;
  FailureReason?: string;
}
export declare const ScheduledQueryState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type ScheduledQueryState =
  (typeof ScheduledQueryState)[keyof typeof ScheduledQueryState];
export interface ScheduledQueryDescription {
  Arn: string | undefined;
  Name: string | undefined;
  QueryString: string | undefined;
  CreationTime?: Date;
  State: ScheduledQueryState | undefined;
  PreviousInvocationTime?: Date;
  NextInvocationTime?: Date;
  ScheduleConfiguration: ScheduleConfiguration | undefined;
  NotificationConfiguration: NotificationConfiguration | undefined;
  TargetConfiguration?: TargetConfiguration;
  ScheduledQueryExecutionRoleArn?: string;
  KmsKeyId?: string;
  ErrorReportConfiguration?: ErrorReportConfiguration;
  LastRunSummary?: ScheduledQueryRunSummary;
  RecentlyFailedRuns?: ScheduledQueryRunSummary[];
}
export interface DescribeScheduledQueryResponse {
  ScheduledQuery: ScheduledQueryDescription | undefined;
}
export interface ExecuteScheduledQueryRequest {
  ScheduledQueryArn: string | undefined;
  InvocationTime: Date | undefined;
  ClientToken?: string;
}
export interface ListScheduledQueriesRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface TimestreamDestination {
  DatabaseName?: string;
  TableName?: string;
}
export interface TargetDestination {
  TimestreamDestination?: TimestreamDestination;
}
export interface ScheduledQuery {
  Arn: string | undefined;
  Name: string | undefined;
  CreationTime?: Date;
  State: ScheduledQueryState | undefined;
  PreviousInvocationTime?: Date;
  NextInvocationTime?: Date;
  ErrorReportConfiguration?: ErrorReportConfiguration;
  TargetDestination?: TargetDestination;
  LastRunStatus?: ScheduledQueryRunStatus;
}
export interface ListScheduledQueriesResponse {
  ScheduledQueries: ScheduledQuery[] | undefined;
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceARN: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListTagsForResourceResponse {
  Tags: Tag[] | undefined;
  NextToken?: string;
}
export interface PrepareQueryRequest {
  QueryString: string | undefined;
  ValidateOnly?: boolean;
}
export declare class QueryExecutionException extends __BaseException {
  readonly name: "QueryExecutionException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<QueryExecutionException, __BaseException>
  );
}
export interface QueryRequest {
  QueryString: string | undefined;
  ClientToken?: string;
  NextToken?: string;
  MaxRows?: number;
}
export interface QueryStatus {
  ProgressPercentage?: number;
  CumulativeBytesScanned?: number;
  CumulativeBytesMetered?: number;
}
export interface TagResourceRequest {
  ResourceARN: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceARN: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateScheduledQueryRequest {
  ScheduledQueryArn: string | undefined;
  State: ScheduledQueryState | undefined;
}
export interface ColumnInfo {
  Name?: string;
  Type: Type | undefined;
}
export interface Type {
  ScalarType?: ScalarType;
  ArrayColumnInfo?: ColumnInfo;
  TimeSeriesMeasureValueColumnInfo?: ColumnInfo;
  RowColumnInfo?: ColumnInfo[];
}
export interface Datum {
  ScalarValue?: string;
  TimeSeriesValue?: TimeSeriesDataPoint[];
  ArrayValue?: Datum[];
  RowValue?: Row;
  NullValue?: boolean;
}
export interface ParameterMapping {
  Name: string | undefined;
  Type: Type | undefined;
}
export interface SelectColumn {
  Name?: string;
  Type?: Type;
  DatabaseName?: string;
  TableName?: string;
  Aliased?: boolean;
}
export interface TimeSeriesDataPoint {
  Time: string | undefined;
  Value: Datum | undefined;
}
export interface Row {
  Data: Datum[] | undefined;
}
export interface QueryResponse {
  QueryId: string | undefined;
  NextToken?: string;
  Rows: Row[] | undefined;
  ColumnInfo: ColumnInfo[] | undefined;
  QueryStatus?: QueryStatus;
}
export interface PrepareQueryResponse {
  QueryString: string | undefined;
  Columns: SelectColumn[] | undefined;
  Parameters: ParameterMapping[] | undefined;
}
export declare const CreateScheduledQueryRequestFilterSensitiveLog: (
  obj: CreateScheduledQueryRequest
) => any;
export declare const ScheduledQueryDescriptionFilterSensitiveLog: (
  obj: ScheduledQueryDescription
) => any;
export declare const DescribeScheduledQueryResponseFilterSensitiveLog: (
  obj: DescribeScheduledQueryResponse
) => any;
export declare const ExecuteScheduledQueryRequestFilterSensitiveLog: (
  obj: ExecuteScheduledQueryRequest
) => any;
export declare const PrepareQueryRequestFilterSensitiveLog: (
  obj: PrepareQueryRequest
) => any;
export declare const QueryRequestFilterSensitiveLog: (obj: QueryRequest) => any;
export declare const PrepareQueryResponseFilterSensitiveLog: (
  obj: PrepareQueryResponse
) => any;
